AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  A simple authentication and authorization example

Resources:
  HelloApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: 'hello-20210330'
      #!!! Intrinsic functions are not supported in external OpenApi files referenced by DefinitionUri
      DefinitionBody:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: './openapi.yaml'
      StageName: Test
      #NOTE: CORS requires AWS SAM to modify your OpenAPI definition. So, it works only if inline OpenApi is defined with DefinitionBody.
      # Cors: "'*'"
      AccessLogSetting:
        DestinationArn: !GetAtt ApiGatewayLogGroup.Arn
        # The format must include at least $context.requestId
        # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-apigateway-stage-accesslogsetting.html
        #Other formats to include later
        #  "authorizeError":"$context.authorize.error",
        #  "authorizeStatus":"$context.authorize.status",
        #  "authorizerSub":"$context.authorizer.claims.sub",
        #  "authorizerError":"$context.authorizer.error",
        #  "authorizerStatus":"$context.authorizer.status",
        #  "authenticateStatus":"$context.authenticate.status",
        # Make sure you have all lines at same indentation so that ">-" removes newlines.
        Format: >-
          { 
          "requestId":"$context.requestId",
          "ip": "$context.identity.sourceIp",
          "caller":"$context.identity.caller",
          "user":"$context.identity.user",
          "requestTime":"$context.requestTime",
          "httpMethod":"$context.httpMethod",
          "resourcePath":"$context.resourcePath",
          "status":"$context.status",
          "protocol":"$context.protocol",
          "responseLength":"$context.responseLength",
          "integrationError":"$context.integration.error",
          "integrationStatus":"$context.integration.integration.status"
          }

  TapedeckArchiveFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: tapedeck-archive-test
      CodeUri: archive/
      Handler: app.lambdaHandler
      Runtime: nodejs14.x
      Timeout: 15
      MemorySize: 520
      Role: !GetAtt LambdaArchiveRole.Arn
      Events:
        TapedeckArchive:
          Type: Api
          Properties:
            Path: /archive
            Method: post
            RestApiId: !Ref TapedeckApi

  LambdaArchiveLogGroup:
    Type: AWS::Logs::LogGroup

  ApiGatewayLogGroup:
    # This is a Cloud Formation type
    Type: AWS::Logs::LogGroup

  ## An account for this API and corresponding role are required to enable CloudWatch integration.
  Account:
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt CloudWatchRole.Arn

  TapedeckBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: tapedeck-archives-test
  #      VersioningConfiguration: Enabled

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-apigateway-account.html
  CloudWatchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
  LambdaArchiveRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt LambdaArchiveLogGroup.Arn
        - PolicyName: s3
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action: s3:PutObject
                Resource: !Sub '${TapedeckBucket.Arn}/*'
  # Authorizer:
  #   Type: AWS::ApiGateway::Authorizer
  #   Properties:
  #     RestApiId:

  UserPool:
    Type: 'AWS::Cognito::UserPool'
    Properties:
      UserPoolName: 'TapeDeckUserPool20210319'
      # Schema:
      #   - Name: email
      #     Required: true
      #     Mutable: true
      # AdminCreateUserConfig:
      #   AllowAdminCreateUserOnly: true

  UserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      ClientName: 'tapedeck-web-client'
      GenerateSecret: false
      ExplicitAuthFlows:
        ['ALLOW_USER_PASSWORD_AUTH', 'ALLOW_REFRESH_TOKEN_AUTH']
      PreventUserExistenceErrors: 'ENABLED'
      UserPoolId: !Ref UserPool
# Outputs:
#   HelloWorldApi:
#     Description: 'API Gateway endpoint URL for Prod stage for Hello World function'
#     Value: !Sub 'https://${HelloWorldApi}.execute-api.${AWS::Region}.amazonaws.com'
#   HelloWorldFunction:
#     Description: 'Hello World Lambda Function ARN'
#     Value: !GetAtt HelloWorldFunction.Arn
#   HelloWorldFunctionIamRole:
#     Description: 'Implicit IAM Role created for Hello World function'
#     Value: !GetAtt HelloWorldFunctionRole.Arn
